#!/bin/sh -e
# bzflag
# Copyright (c) 1993-2013 Tim Riker
#
# This package is free software;  you can redistribute it and/or
# modify it under the terms of the license found in the file
# named COPYING that should have accompanied this file.
#
# THIS PACKAGE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

# Import the BZFlag SourceForge Subversion repository into Git.  The
# complexity of this carefully tailored script mirrors the complexity
# generated by more than 70 people in 13+ years of development.

# This is a preliminary version that imports only the final 1251
# commits comprising all of the v2.4.x work in the Subversion repo.

SOURCE="`dirname $0`"
SOURCE="`readlink -f $SOURCE`"			# use full path
MASTER_REPO="file://`cd $SOURCE && git rev-parse --git-dir`"
AUTHORS="$SOURCE/svn_authors"
UPSTREAM_REPO=https://svn.code.sf.net/p/bzflag/code
UPSTREAM_UUID=08b3d480-bf2c-0410-a26f-811ee3361c24
SVN_REPO=file:///scratch/bzflag/bzflag.svn	# $UPSTREAM_REPO will be much slower
set -x		# show commands as they are executed
GIT_REPO_NAME=svn2git
cd /tmp		# use a tmpfs (ramdisk) file system for maximum speed
exec < /dev/null > $GIT_REPO_NAME.log 2>&1

# The git-svn documentation claims that --rewrite-root and
# --rewrite-uuid may be used together, but the code incorrectly
# prohibits it.  Work around this by initializing the Git repo in two
# steps, with one option in each.
git svn init $SVN_REPO --rewrite-root=$UPSTREAM_REPO \
 --trunk=trunk/bzflag \
 $GIT_REPO_NAME
git svn init $SVN_REPO --rewrite-uuid=$UPSTREAM_UUID \
 --branches=branches/experimental/\* \
 --tags=tags/\* \
 $GIT_REPO_NAME
cd $GIT_REPO_NAME

# Import v2.x svn commits starting from when 2.99.x was replaced with 2.3.0 on trunk.
# This takes 8 minutes on Bullet Catcher's computer.
time git svn fetch -q -r21396:22828 --authors-file=$AUTHORS

# clean up branches
git branch -d -r v2_99continuing		# not ready for this branch now
git rebase --keep-empty tags/v2_4_2 master	# bring branched tag inline
git branch -d -r trunk
git rebase --keep-empty tags/v2_4_0 master	# bring branched tag inline
git rebase --keep-empty --onto `git rev-parse 'master^{/@22531.08b3d480}'` \
 remotes/2_4_OSX_Lion_Rebuild_branch~4 \
 remotes/2_4_OSX_Lion_Rebuild_branch
git branch OSX_Lion_rebuild HEAD		# rebase leaves HEAD at a convenient place
git branch -d -r 2_4_OSX_Lion_Rebuild_branch

# establish tags
git branch -d -r tags/v2_4_2
git tag v2.4.2 `git rev-parse :/@22528.08b3d480`	# r22528
git branch -d -r tags/v2_4_0
git tag v2.4.0 `git rev-parse :/@22053.08b3d480`	# r22053

# give the branch a meaningful name
git branch -m master v2_4_x

# change all committer info to match the author
git filter-branch --env-filter 'export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME";export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL";export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"' -- --all | tr \\015 \\012
rm -r .git/refs/original	# discard old commits saved by filter-branch 

# set the master branch to unborn state
echo ref: refs/heads/master > .git/HEAD
rm -r *
git rm -q -r --cached .

git remote add -f m $MASTER_REPO		# import master branch
git branch --track master remotes/m/master	# disconnected master branch
git remote remove m				# disconnect from repo
git reset --hard HEAD				# checkout master branch

sleep 1						# let the clock advance
git reflog expire --expire=now --all		# purge reflogs
git gc --prune=now				# rewritten commits be gone!
rm .git/COMMIT_EDITMSG .git/FETCH_HEAD		# tidy
rm -r .git/logs/refs/remotes .git/refs/remotes	# tidy
git status --ignored				# update index and show state

# 10.5 minutes elapsed time on Bullet Catcher's computer
